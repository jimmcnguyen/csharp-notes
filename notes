//type casting - convert one data type to another
int x = (int) 20.9; // rounded down to 20, .9 gets truncated
or
string x = "32";
int i = Convert.ToInt32(x); // use convert when casting with not similar data types
or
int i = Convert.ToInt32(Console.ReadLine());

//initializing non-integers
int and double doesn't need anything extra because it is used by default
float hourlyRate = 60.5f;
decimal income = 25300.65m;

//array - collection of data 
int[] userAge = {21, 22, 23, 24, 25};
int[] userAge2 = new int[5]; // default values are 0,0,0,0,0
//updating an array
userAge[0] = 30; // will change the array to {30,22,23,24,25}
//can also do math operations while updating array
userAge[0] = userAge[0] + 2  // returns 32 as index 0
userAge.Length // returns 5
//copy()
int[] source = {12,1,5,-2,16,14};
int[] dest = {1,2,3,4};
Array.Copy(source, dest, 3); // source is unchanged; dest returns 12,1,5,4}
Array.Sort() // sorts an array
Array.IndexOf(numbers, 21); // looks through the array 'numbers' and sees if 21 exists
//are immutable; once defined it cannot be expanded or shrunk
Array.Reverse(); reverses

// Lists are like arrays except elements can be added and removed
List<int> userAgeList = new List<int> {11,12,13,14};

userAgeList.Add(51); // will add 51 to the end of the list
userAgeList.Count // returns number of items in the list
userAgeList.Insert(2,51); // will insert 51 into index 2 
userAgeList.Remove(51); // will remove the first instance of 51 in the list
userAgeList.RemoveAt(3); // will remove at a specific index
userAgeList.Contains(51); // will check if a list contains the items
userAgeList.Clear(); // removes the whole list

// datetime
DateTime myValue = DateTime.Now(); // sets myValue to the current date and time
Console.WriteLine(myValue.ToShortDateString()); // returns just the date, not time; 

DateTime myBirthday = new DateTime(1969, 12, 7);
Console.WriteLine(myBirthday.ToShortDateSTring()); // will return 12/7/1969

// strings
string message = string.Format("{0}, 123);
string message = "Hello World";
string newMessage = message.Substring(2, 5); // returns "llo W"
value.ToUpper();
value.Replace("what i want to replace ", "what i'm replacing it with ");

//Equals() - compares 2 strings if they are identical
string firsString = "This is X";
firstString.Equals("This is X"); // will return true

//Split() splits a string into substrings based on an array of separators
string[] separator = {", ", "; "};
string names = "Peter, John; Andy, , David";
string[] substrings = names.Split(separator, StringSplitOptions.None);
// the result will be {"Peter", "John", "Andy", "", "David"} // the names are now individual items in a  list
// StringSplitOptions.RemoveEmptyEntries will remove the ""

// random
this. i think implies that something belongs within the class
string.Format()
void means it will return nothing
always include Console.ReadLine(); at the end
Convert.ToInt32() vs Int32.Pase():
use Int32.Parse() if the expected string will ALWAYS be an integer (can only convert strings)
Console.WriteLine("The number is {0:F3}.", 123.5678); // will return a value of 123.567
Console.WriteLine("Deposit = {0:C}", 2125); // will return $2125.00
Console.WriteLine("{0:N}",123566); will return 123,566.00
Console.WriteLine("{0:P}", .123); will return 12.3%
// escape sequences
\t will print the tab
\n will start a new line
"\\" will output \
\" will allow " to be printed 
++counter vs counter ++ // ++counter will increment before, counter++ will start as counter then increment afterwards
example:
int a = 1;
int b = a++; // a = 2 and b = 1
int a = 1;
int b = ++a; // a = 2 and b = 2
break - exists a loop prematurely
continue - rest of the loop after the keyword is skipped for that iteration; page 65 for example
// assignment operators
a += 3; same as a = a + 3 // same goes for -, *, /
// logical operators will always return boolean
value types - aka anything that's not an array or list; changes only apply within the method pg 93
refrence types - aka lists and arrays; changes made will reflect everywhere
// { get; set; } is short hand for:
Example:
public class Genre
{
    public string Name { get; set; } // allow access to private fields; notice the pascal case
}

public class MainClass
{
    public static void Main()
    {
        Genre g1 = new Genre();
        Genre g2 = new Genre();
        Genre g3 = new Genre();

        g1.Name = "Hip Hop";
        g2.Name = "Rock";
        g3.Name = "Country";

        Console.WriteLine ("Genres: {0}, {1}, {2}", g1.Name, g2.Name, g3.Name);
    }
}
https://stackoverflow.com/questions/5096926/what-is-the-get-set-syntax-in-c
// static keywords - allows classes to be accessed without creating an object pg 86
- derived classes also known as child classes; classes they are derived from are called parent classes
- polymorphism

//operators
&& and
|| or
! not

// control flow statements
if (condition) // if condition is met, do the task
{
    do Task A
}
else if (condition)
{
    do Task B
}
else
{
    do Task C
}    

// switch statements - similar to if statement except only takes 1 value
switch (variable)
{
    case "A+":
    case "A":
        do Task A
        break;
    case "B":
        do Task B
        break;
    default:
        do Task C
        break;
}

//for loops - executes a block of code repeatedly until test condition is no longer valid; similar to while loops in that they both have a counter
for (initial value; test condition; modification to value)
{
    // do something
}
// commonly used to iterate through an array or list
int[] myNum = {1,2,3,4,5};
for (int i = 0; i < myNum.Length; i++)
{
    Console.WriteLine(myNum[i]);
}

// foreach loop - useful for getting information from an array/list without making changes to it
char[] message = {'h','e','l','l','o'}
foreach (char i in message)
{
    Console.Write(i); // will return "hello"
}    

// while loop - repeatedly executes instructions while a condition is valid; usually need to declare a counter first; will cause infinite loop if no break condition is made
int counter = 5;
while (counter > 0)
{
    Console.WriteLine("Counter = {0}", counter); // will print out Counter = 5 the first time
    counter = counter - 1; // decrements the counter after each loop, next loop counter = 4
}

// do while - similar to while loop except all the codes in the curly braces will be executed at least once
int counter = 100;
do {
    Console.WriteLine("Counter = {0}", counter);
    counter++;
} while (counter < 0); // this is executed after the code in the curly braces is tested; the loop will exit because the counter will now be 101 and is not < than 0 
 
// error handeling pg 66 

// Classes - use pascal case; contains content such as fields, properties and methods; think of it has a blueprint for the object 
class Staff
{
    private string nameOfStaff;
    private const int hourlyRate = 30;
    private int hWorked;
}
fields - variables in a class

properties - commonly used to access private fields if it's needed by other classes; shorcut is prop tab tab
public int HoursWorked // pascal case
{
    get
    {
        return hWorked; // pulls from the private field above
     }
     set
     {
        if (value > 0) // value is a keyword that is linked to the private field (hWorked)
            hWorked = value;
        else
            hWorked = 0;
       }
}       

// methods - similar to functions in that they perform a task
example 1
public void PrintMessage() // void = does not return a result
{
    Console.Write("Calculating pay...");
}
example 2
public int CalculatePay(int bonus, int allowance) // 2 arguments
{
    PrintMessage(); // calls the previous method
    
    int staffPay = hWorked * hourlyRate + bonus + allowance; // staffPay is a local variable and only exists within this method
    
    if (hWorked > 0)
        return staffPay;
    else
        return 0;
}  

// constructors - a method that is used to create an object from the class template; commonly used to initliaze the fields of a class; it is the fist method that is called when creating an object
// constructors always have the same name as the class; do not need to put void
example
public Staff(string fname, string lname)
{
    nameOfStaff = fname + " " + lname;
    Console.WriteLine("\n" + nameOfStaff);
    Console.WriteLine("-----------------");
}

// instantiating an object - process of using the class to make an object
in the example he writes it in the Main() method of the Program class
ClassName objectName = new ClassName(arguments); // syntax

int pay;
Staff staff1 = new Staff("Peter", "G"); // staff1 is the object; calls out to the constructor
staff1.HoursWorked = 160; // calls out to the HoursWorked properties
pay = staff1.CalculatePay(1000, 400); // calls out to the CalculatePay method
console.WriteLine("Pay = {0}", pay);

// reading a txt file - ** need to add Using System.IO; ** values.txt will need to be created in the bin folder (copy always)
            StreamReader myReader = new StreamReader("values.txt"); // reads every line of the txt file
            string line = "";

            while (line != null) // will continue to read the txt file until there's nothing else
            {
                line = myReader.ReadLine();
                if (line != null)
                    Console.WriteLine(line);
            }
            myReader.Close(); // must have
            Console.ReadLine();


